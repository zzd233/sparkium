#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(binding = 10) readonly buffer light_source_object_info_array {
  uint light_source_object_infos[];
};


layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

#include "medium.glsl"

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

void SampleLight(vec3 O, vec3 N, out vec3 dir, out vec3 eval, out float pdf) {
  int n_ls = light_source_object_infos.length();
  if (n_ls == 0) {
    eval = vec3(0);
    pdf = 0;
    return;
  }
  int obj_id = int(light_source_object_infos[int(RandomFloat() * n_ls)]);
  ObjectInfo obj = object_infos[obj_id];
  int n_meshes = int(obj.n_meshes);
  int mesh_id = int(RandomFloat() * n_meshes);
  Vertex v0 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 0]);
  Vertex v1 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 1]);
  Vertex v2 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 2]);
  vec3 mesh_normal = cross(v1.position - v0.position, v2.position - v0.position);
  float area = length(mesh_normal) / 2;
  mesh_normal = normalize(mesh_normal);
  float r0 = RandomFloat(), r1 = RandomFloat(), r2;
  if (r0 + r1 > 1) {
    r0 = 1 - r0;
    r1 = 1 - r1;
  }
  r2 = 1 - r0 - r1;
  vec3 sampled_position = r0 * v0.position + r1 * v1.position + r2 * v2.position;
  dir = sampled_position - O;
  TraceRay(O, normalize(dir));
  if (dot(N, dir) > 0 && ray_payload.t > 1e-4 && length(sampled_position - hit_record.position) < 1e-4){
    Material m = materials[obj_id];
    float cos_ = abs(dot(hit_record.normal, normalize(dir)));
    pdf = 1.0 / n_ls / n_meshes / (area * cos_ / (ray_payload.t * ray_payload.t));
    eval = m.emission * m.emission_strength * n_ls * n_meshes * area * cos_ / (ray_payload.t * ray_payload.t);
  } else {
    eval = vec3(0);
    pdf = 0;
  }
  dir = normalize(dir);
}

float EvalPDF(Material m, vec3 N, vec3 dir_in, vec3 dir_out, out vec3 eval) {
  dir_in = normalize(dir_in);
  dir_out = normalize(dir_out);
  eval = vec3(0);
  if (m.material_type == MATERIAL_TYPE_LAMBERTIAN) {
    float pdf = dot(N, dir_out) / PI;
    eval = hit_record.base_color / PI * dot(N, dir_out);
    return pdf;
  }
  if (m.material_type == MATERIAL_TYPE_PRINCIPLED) {
    float pdf = dot(N, dir_out) / PI;

    float kd = 1 - m.metallization;
    float ks = 1 - kd;
    int n = 8;

    vec3 spe_out_direction = dir_in - 2.0 * dot(N, dir_in) * N;
    float cosine = max(0,dot(dir_out, spe_out_direction));

    float t1 = kd * INV_PI;
    float t2 = ks * (n+2) * INV_PI / 2 * pow(cosine,n);

    eval = vec3(t1+t2) * hit_record.base_color * dot(N, dir_out);
    return pdf;
  }
  return 0;
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  int col = -1;

  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  bool in_medium = false;
  uint cur_medium_type;
  vec3 cur_coef_absorption;
  vec3 cur_coef_scattering;
  
  float RR_P = 0.9;
  float lastpdf = 1e6;
  float mis_ratio = 1.0;
  vec3 lastN = vec3(0);

  for (int b = 0; true || b < guo.num_bounces; b++) {
    direction = normalize(direction);
    TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }
    Material material = materials[ray_payload.object_id];
    
    // if (RandomFloat() > material.alpha) {
    //   origin = ray_payload.t * direction + origin;
    //   continue;
    // }

    lastN = hit_record.normal;
    bool lost_in_medium = in_medium;
    if(in_medium) {
      if(material.medium_type != cur_medium_type)
        return vec3(0.0);
      float tFar = length(hit_record.position - origin);
      float dis = MediumSampleDistance(cur_medium_type, cur_coef_scattering, tFar, lastpdf, col);
      vec3 absorb_by_dis = Transmission(cur_medium_type, cur_coef_absorption, dis);
      throughput *= absorb_by_dis;
      if(col != -1){
        if(col == 0) throughput *= vec3(1.0, 0.0, 0.0);
        if(col == 1) throughput *= vec3(0.0, 1.0, 0.0);
        if(col == 2) throughput *= vec3(0.0, 0.0, 1.0);
      }
      if(dis == tFar) lost_in_medium = false;
      else{
        origin = origin + dis * direction;
        direction = SampleScatterDirection(cur_medium_type, direction, lastpdf);
      }
      // vec3(exp(- next_absorb[0] * hit_dis), exp(- next_absorb[1] * hit_dis), exp(- next_absorb[2] * hit_dis));
    }

    if (guo.enable_mis && ! in_medium) {
      vec3 N = hit_record.normal;
      if (dot(N, direction) > 0)
        N *= -1;
      vec3 eval, dir, eval_obj;
      float pdf;
      SampleLight(hit_record.position, N, dir, eval, pdf);
      TraceRay(origin, direction);
      float obj_pdf = EvalPDF(material, N, direction, dir, eval_obj);
      if (pdf > 1e-4) {
        radiance += throughput * eval * eval_obj * (pdf * pdf) / (pdf * pdf + obj_pdf * obj_pdf);
      }
    }
    
    
    if (RandomFloat() > RR_P)
      break;
    throughput /= RR_P;
    if(lost_in_medium) continue;


    if (material.material_type == MATERIAL_TYPE_SUBSURFACE) {
      in_medium = !in_medium;
      cur_medium_type = material.medium_type;
      cur_coef_absorption = -log( material.absorption_color ) / material.dis_absorption;
      cur_coef_scattering = vec3( 1.0 / material.dis_scattering );

      if (dot(hit_record.normal, direction) > 0.0f)
        hit_record.normal *= -1.0f;
      float r1 = RandomFloat() * PI * 2;
      float r2 = RandomFloat();

      vec3 N = hit_record.normal, x, y;
      x = vec3(N.z - N.y, N.x - N.z, N.y - N.x);
      if (N.x == N.y && N.x == N.z)
        x = vec3(N.z - N.y, N.x + N.z, -N.y - N.x);
      x = normalize(x);
      y = cross(N, x);
      vec3 dir = vec3(sin(r1) * sqrt(1.0 - r2), cos(r1) * sqrt(1.0 - r2), sqrt(r2));
      float pdf = dir.z / PI;
      dir = x * dir.x + y * dir.y + N * dir.z;
      throughput *= dot(N, normalize(dir)) / PI *hit_record.base_color / pdf;
      origin = hit_record.position;
      direction = - dir;
      lastpdf = pdf;
    } else if (material.material_type == MATERIAL_TYPE_EMISSION) {
      mis_ratio = 1;
      if (guo.enable_mis && b > 0) {
        float pdf;
        int n_ls = light_source_object_infos.length();
        ObjectInfo obj = object_infos[ray_payload.object_id];
        int n_meshes = int(obj.n_meshes);
        int mesh_id = int(ray_payload.primitive_id);
        Vertex v0 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 0]);
        Vertex v1 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 1]);
        Vertex v2 = GetVertex(obj.vertex_offset + indices[obj.index_offset + mesh_id * 3 + 2]);
        vec3 mesh_normal = cross(v1.position - v0.position, v2.position - v0.position);
        float area = length(mesh_normal) / 2;
        mesh_normal = normalize(mesh_normal);
        float cos_ = abs(dot(direction, hit_record.normal));
        pdf = 1.0 / n_ls / n_meshes / (area * cos_ / (ray_payload.t * ray_payload.t));
        mis_ratio = (lastpdf * lastpdf) / (lastpdf * lastpdf + pdf * pdf);
      }
      radiance += throughput * material.emission * material.emission_strength * mis_ratio;
      break;
    } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
      if (dot(hit_record.normal, direction) > 0.0f)
        hit_record.normal *= -1.0f;
      direction -= 2.0f * dot(hit_record.normal, direction) * hit_record.normal;
      origin = hit_record.position;
      lastpdf = 1e6;
    } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
      if (dot(hit_record.normal, direction) > 0.0f)
        hit_record.normal *= -1.0f;
      float r1 = RandomFloat() * PI * 2;
      float r2 = RandomFloat();

      vec3 N = hit_record.normal, x, y;
      x = vec3(N.z - N.y, N.x - N.z, N.y - N.x);
      if (N.x == N.y && N.x == N.z)
        x = vec3(N.z - N.y, N.x + N.z, -N.y - N.x);
      x = normalize(x);
      y = cross(N, x);
      vec3 dir = vec3(sin(r1) * sqrt(1.0 - r2), cos(r1) * sqrt(1.0 - r2), sqrt(r2));
      float pdf = dir.z / PI;
      dir = x * dir.x + y * dir.y + N * dir.z;
      throughput *= dot(N, normalize(dir)) / PI * hit_record.base_color / pdf;
      origin = hit_record.position;
      direction = dir;
      lastpdf = pdf;
    } else if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
      float eta = material.refraction_ratio;
      float cos_i = dot(hit_record.normal, direction);
      float sin_i = sqrt(1-cos_i*cos_i);

      if (cos_i < 0) {
        hit_record.normal *= -1;
        cos_i = -cos_i;
      } else {
        eta = 1.0/eta;
      }

      float sin_o = sin_i / eta, cos_o;
      float prob = 1;
      if (sin_o <= 1) {
        cos_o = sqrt(1-sin_o*sin_o);
        float sqrtRs = (cos_i - eta * cos_o) / (cos_i + eta * cos_o);
        float sqrtRp = (cos_o - eta * cos_i) / (cos_o + eta * cos_i);
        prob = (sqrtRs*sqrtRs + sqrtRp*sqrtRp) / 2;
      }
      if (RandomFloat() > prob) {
        origin = hit_record.position;
        direction = cos_o * hit_record.normal + sin_o * normalize(direction - dot(direction, hit_record.normal) * hit_record.normal);
        lastpdf = 1e6;
      } else {
        origin = hit_record.position;
        direction -= 2.0f * dot(hit_record.normal, direction) * hit_record.normal;
        lastpdf = 1e6;
      }
    } else if (material.material_type == MATERIAL_TYPE_PRINCIPLED) {
        if (dot(hit_record.normal, direction) > 0.0f)
          hit_record.normal *= -1.0f;
        float r1 = RandomFloat() * PI * 2;
        float r2 = RandomFloat();

        vec3 N = hit_record.normal, x, y;
        x = vec3(N.z - N.y, N.x - N.z, N.y - N.x);
        if (N.x == N.y && N.x == N.z)
          x = vec3(N.z - N.y, N.x + N.z, -N.y - N.x);
        x = normalize(x);
        y = cross(N, x);
        vec3 dir = vec3(sin(r1) * sqrt(1.0 - r2), cos(r1) * sqrt(1.0 - r2), sqrt(r2));
        float pdf = dir.z / PI;
        dir = x * dir.x + y * dir.y + N * dir.z;

        float kd = 1 - material.metallization;
        float ks = 1-kd;
        int n = 8;

        vec3 spe_out_direction = direction - 2.0f * dot(hit_record.normal, direction) * hit_record.normal;
        float cosine = max(0,dot(dir, spe_out_direction));

        float t1 = kd * INV_PI;
        float t2 = ks * (n+2) * INV_PI / 2 * pow(cosine,n);

        throughput *= vec3(t1+t2) * hit_record.base_color * PI;
        origin = hit_record.position;
        direction = dir;
        lastpdf = pdf;
    } else {
      break;
    }

  }
  return radiance;
}

void main() {

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);
  
  vec3 total_radiance = vec3(0.0);

  for (int i = 0; i < guo.num_samples; i++) {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(), RandomFloat());
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    // vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec3 origin =
        vec3(camera_to_world *
             vec4(RandomInCircle() * guo.aperture, 0, 1));
    vec3 target = vec3(screen_to_camera * vec4(d.x, d.y, 1.0, 1.0));
    target = normalize(target);
    target *= -guo.focal_length / target.z;
    target = vec3(camera_to_world * vec4(target, 1.0));
    vec3 direction = normalize(target - origin);

    total_radiance +=
        clamp(SampleRay(origin, direction), 0.0, guo.clamp);
  }
  imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                 vec4(total_radiance, 1.0));
  imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + float(guo.num_samples));
}
