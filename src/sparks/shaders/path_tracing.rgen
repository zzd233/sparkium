#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
}

vec3 EvalBSDF(Material m, vec3 N, vec3 dir_in, vec3 dir_out) {
  N = normalize(N);
  dir_in = normalize(dir_in);
  dir_out = normalize(dir_out);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  vec3 next_absorb = vec3(1.0);
  bool exp_absorb = false;
  
  float RR_P = 0.9;
  float lastpdf = 1.0;

  for (int b = 0; b < guo.num_bounces; b++) {
    direction = normalize(direction);
    TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }
    Material material = materials[ray_payload.object_id];
    
    if (RandomFloat() > material.alpha) {
      origin = ray_payload.t * direction + origin;
      continue;
    }

    hit_record = GetHitRecord(ray_payload, origin, direction);
    hit_record.normal = normalize(hit_record.normal);
    float hit_dis = length(hit_record.position - origin);
    if(false && exp_absorb && !hit_record.front_face) {
      vec3 absorb_by_dis = vec3(exp(- next_absorb[0] * hit_dis), exp(- next_absorb[1] * hit_dis), exp(- next_absorb[2] * hit_dis));
      throughput *= absorb_by_dis;
    }
    next_absorb = vec3(1.0);
    exp_absorb = false;
    
    if (guo.enable_mis) {
      return vec3(0);
    }

    if (material.material_type == MATERIAL_TYPE_EMISSION) {
      radiance += throughput * material.emission * material.emission_strength;
      break;
    } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
      if (dot(hit_record.normal, direction) > 0.0f)
        hit_record.normal *= -1.0f;
      direction -= 2.0f * dot(hit_record.normal, direction) * hit_record.normal;
      origin = hit_record.position;
      lastpdf = 1e6;
    } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
      if (dot(hit_record.normal, direction) > 0.0f)
        hit_record.normal *= -1.0f;
      float r1 = RandomFloat() * PI * 2;
      float r2 = RandomFloat();

      vec3 N = hit_record.normal, x, y;
      x = vec3(N.z - N.y, N.x - N.z, N.y - N.x);
      if (N.x == N.y && N.x == N.z)
        x = vec3(N.z - N.y, N.x + N.z, -N.y - N.x);
      x = normalize(x);
      y = cross(N, x);
      vec3 dir = vec3(sin(r1) * sqrt(1.0 - r2), cos(r1) * sqrt(1.0 - r2), sqrt(r2));
      float pdf = dir.z / PI;
      dir = x * dir.x + y * dir.y + N * dir.z;
      if (dot(N, dir) > 0) {
        throughput *= vec3(pdf) * hit_record.base_color / pdf;
      } else {
        throughput *= 0;
        break;
      }
      origin = hit_record.position;
      direction = dir;
      lastpdf = pdf;
    } else if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
      float eta = material.refraction_ratio;
      float cos_i = dot(hit_record.normal, direction);
      float sin_i = sqrt(1-cos_i*cos_i);

      if (cos_i < 0) {
        hit_record.normal *= -1;
        cos_i = -cos_i;
      } else {
        eta = 1.0/eta;
      }

      float sin_o = sin_i / eta, cos_o;
      float prob = 1;
      if (sin_o <= 1) {
        cos_o = sqrt(1-sin_o*sin_o);
        float sqrtRs = (cos_i - eta * cos_o) / (cos_i + eta * cos_o);
        float sqrtRp = (cos_o - eta * cos_i) / (cos_o + eta * cos_i);
        prob = (sqrtRs*sqrtRs + sqrtRp*sqrtRp) / 2;
      }
      if (RandomFloat() > prob) {
        origin = hit_record.position;
        direction = cos_o * hit_record.normal + sin_o * normalize(direction - dot(direction, hit_record.normal) * hit_record.normal);
        lastpdf = 1e6;
        // if ( material.medium_type == MEDIUM_TYPE_NONSCATTERING ) {
        if ( false ){
          // next_absorb = material.coef_absorption;
          exp_absorb = true;
        }
      } else {
        origin = hit_record.position;
        direction -= 2.0f * dot(hit_record.normal, direction) * hit_record.normal;
        lastpdf = 1e6;
      }
    } else {
      break;
    }

    if (RandomFloat() > RR_P)
      break;
    throughput /= RR_P;
  }
  return radiance;
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
